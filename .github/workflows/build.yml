name: Build and Release Universal FMC Keyboard Input Plugin

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  actions: read

jobs:
  # Check if VERSION file changed and we need to create a release
  check-version:
    name: Check Version Change
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      should_release: ${{ steps.version_check.outputs.should_release }}
      version: ${{ steps.version_check.outputs.version }}
      tag: ${{ steps.version_check.outputs.tag }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check if VERSION file changed
      id: version_check
      run: |
        # Check if VERSION file was modified in the last commit
        if git diff --name-only HEAD~1 HEAD | grep -q "^VERSION$"; then
          echo "VERSION file was modified in this commit"
          
          if [ ! -f VERSION ]; then
            echo "VERSION file not found!"
            exit 1
          fi
          
          VERSION=$(cat VERSION | tr -d '\n' | tr -d '\r')
          echo "Found version: $VERSION"
          
          # Validate version format (basic semver check)
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-suffix (e.g., 1.0.0 or 1.0.0-beta.1)"
            exit 1
          fi
          
          TAG="v$VERSION"
          
          # Check if tag already exists
          if git tag -l | grep -q "^$TAG$"; then
            echo "Tag $TAG already exists, skipping release creation"
            echo "should_release=false" >> $GITHUB_OUTPUT
          else
            echo "Tag $TAG does not exist, will create release"
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag=$TAG" >> $GITHUB_OUTPUT
          fi
        else
          echo "VERSION file was not modified, no release needed"
          echo "should_release=false" >> $GITHUB_OUTPUT
        fi

  build:
    name: Build Plugin
    runs-on: ${{ matrix.os }}
    if: always() && (github.event_name == 'pull_request' || github.event_name == 'push')
    
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            platform: windows
            artifact_name: win.xpl
          - os: macos-latest
            platform: mac
            artifact_name: mac.xpl
          - os: ubuntu-latest
            platform: linux
            artifact_name: lin.xpl
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    
    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
      shell: pwsh
    
    - name: Verify CMake installation (Windows)
      if: runner.os == 'Windows'
      run: |
        # Restart PowerShell session to ensure environment variables take effect
        $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH", "Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH", "User")
        cmake --version
      shell: pwsh
    
    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake
    
    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential
    
    - name: Build plugin (Windows)
      if: runner.os == 'Windows'
      run: |
        # Ensure environment variables are set correctly
        $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH", "Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH", "User")
        python build_all.py --platform ${{ matrix.platform }}
      shell: pwsh
    
    - name: Build plugin (Unix)
      if: runner.os != 'Windows'
      run: |
        python build_all.py --platform ${{ matrix.platform }}
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: universal-fmc-keyboard-plugin-${{ matrix.platform }}
        path: build/${{ matrix.artifact_name }}
        retention-days: 30

  package:
    name: Create Release Package
    needs: build
    runs-on: ubuntu-latest
    if: always() && needs.build.result == 'success' && (github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')))
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Create release package
      run: |
        mkdir -p release/UniversalFMCKeyboardInput
        cp artifacts/universal-fmc-keyboard-plugin-windows/win.xpl release/UniversalFMCKeyboardInput/
        cp artifacts/universal-fmc-keyboard-plugin-mac/mac.xpl release/UniversalFMCKeyboardInput/
        cp artifacts/universal-fmc-keyboard-plugin-linux/lin.xpl release/UniversalFMCKeyboardInput/
        
        # Get version from VERSION file or tag
        if [ -f VERSION ]; then
          VERSION=$(cat VERSION)
        else
          VERSION="dev"
        fi
        
        # Create installation instructions file
        cat > release/UniversalFMCKeyboardInput/README.txt << EOF
        Universal FMC Keyboard Input Plugin v${VERSION}
        ===============================================
        
        Multi-Aircraft Support:
        - ZIBO 737 (ICAO: B738) - Full dual FMC support with +/- state management
        - Default 737 (ICAO: B738) - Dual FMS support (FMS/FMS2 systems)
        - Default A330 (ICAO: A330) - Complete dual FMS integration
        - Default SR22 (ICAO: SR22) - GPS GCU keyboard input (no +/- or slash)
        
        Platform Files:
        - Windows: win.xpl
        - macOS: mac.xpl (Universal Binary - Intel + Apple Silicon)
        - Linux: lin.xpl
        
        Installation:
        1. Copy the appropriate .xpl file to your X-Plane installation
        2. Place it in: Resources/plugins/UniversalFMCKeyboardInput/
        3. Restart X-Plane
        
        Usage:
        1. Load any supported aircraft (ZIBO 737, Default 737/A330, or SR22)
        2. Bind keys to these commands in Settings > Keyboard:
           * Universal/FMC_Keyboard/Toggle_Keyboard_Input_Captain
           * Universal/FMC_Keyboard/Toggle_Keyboard_Input_FO
        3. Plugin automatically detects aircraft type and adapts functionality
        4. Toggle keyboard input on/off as needed
        
        Key Features:
        - Automatic aircraft detection and adaptation
        - Smart key mapping per aircraft type
        - Dual FMC/FMS support where available
        - Intelligent +/- state management (ZIBO, 737, A330)
        - Visual status indicators showing active system
        
        Build: $(date '+%Y-%m-%d %H:%M:%S') UTC
        Commit: ${{ github.sha }}
        EOF
        
        cd release
        tar -czf UniversalFMCKeyboardInput.tar.gz UniversalFMCKeyboardInput/
    
    - name: Upload release package
      uses: actions/upload-artifact@v4
      with:
        name: universal-fmc-keyboard-plugin-all-platforms
        path: release/UniversalFMCKeyboardInput.tar.gz
        retention-days: 90

  auto-tag-and-release:
    name: Auto Tag and Release
    needs: [check-version, package]
    runs-on: ubuntu-latest
    if: always() && needs.check-version.outputs.should_release == 'true' && needs.package.result == 'success'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Configure git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Create and push tag
      run: |
        TAG="${{ needs.check-version.outputs.tag }}"
        VERSION="${{ needs.check-version.outputs.version }}"
        
        # Get the commit message that changed VERSION
        COMMIT_MSG=$(git log -1 --pretty=format:"%s")
        
        # Create annotated tag
        git tag -a $TAG -m "Release $VERSION

        Auto-generated release from VERSION file update.
        Original commit: $COMMIT_MSG
        Released: $(date -u '+%Y-%m-%d %H:%M:%S') UTC"
        
        # Push the tag
        git push origin $TAG
        
        echo "✅ Created and pushed tag: $TAG"
    
    - name: Download release package
      uses: actions/download-artifact@v4
      with:
        name: universal-fmc-keyboard-plugin-all-platforms
        path: ./
    
    - name: Download individual platform artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Generate changelog
      id: changelog
      run: |
        VERSION="${{ needs.check-version.outputs.version }}"
        
        # Try to get previous tag for changelog
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## What's Changed" > CHANGELOG.md
          git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD >> CHANGELOG.md
        else
          echo "## What's New" > CHANGELOG.md
          echo "- Universal multi-aircraft keyboard input support" >> CHANGELOG.md
          echo "- ZIBO 737: Full dual FMC support with intelligent +/- state management" >> CHANGELOG.md
          echo "- Default 737: Native dual FMS support (FMS/FMS2 systems)" >> CHANGELOG.md
          echo "- Default A330: Complete dual FMS integration" >> CHANGELOG.md
          echo "- Default SR22: GPS GCU keyboard input support" >> CHANGELOG.md
          echo "- Automatic aircraft detection and adaptation" >> CHANGELOG.md
          echo "- Smart key mapping per aircraft type" >> CHANGELOG.md
          echo "- Cross-platform support (Windows, macOS Universal, Linux)" >> CHANGELOG.md
        fi
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.check-version.outputs.tag }}
        name: Universal FMC Keyboard Input Plugin v${{ needs.check-version.outputs.version }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ contains(needs.check-version.outputs.version, 'rc') || contains(needs.check-version.outputs.version, 'beta') || contains(needs.check-version.outputs.version, 'alpha') }}
        files: |
          UniversalFMCKeyboardInput.tar.gz
          artifacts/universal-fmc-keyboard-plugin-windows/win.xpl
          artifacts/universal-fmc-keyboard-plugin-mac/mac.xpl
          artifacts/universal-fmc-keyboard-plugin-linux/lin.xpl
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Release summary
      run: |
        cat >> $GITHUB_STEP_SUMMARY << EOF
        # 🚀 Release Created Successfully!
        
        **Version:** ${{ needs.check-version.outputs.version }}
        **Tag:** ${{ needs.check-version.outputs.tag }}
        **Release URL:** https://github.com/${{ github.repository }}/releases/tag/${{ needs.check-version.outputs.tag }}
        
        ## 🛩️ Multi-Aircraft Support:
        - ZIBO 737 (ICAO: B738) - Full dual FMC support with +/- state management
        - Default 737 (ICAO: B738) - Dual FMS support (FMS/FMS2 systems)
        - Default A330 (ICAO: A330) - Complete dual FMS integration
        - Default SR22 (ICAO: SR22) - GPS GCU keyboard input
        
        ## Files attached:
        - UniversalFMCKeyboardInput.tar.gz (All platforms package)
        - win.xpl (Windows)
        - mac.xpl (macOS Universal Binary - Intel + Apple Silicon)
        - lin.xpl (Linux)
        
        ## 🎉 Users can now download the universal multi-aircraft release!
        EOF

  # Fallback release job for manual tag pushes
  manual-release:
    name: Manual Tag Release
    needs: package
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && needs.package.result == 'success'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download release package
      uses: actions/download-artifact@v4
      with:
        name: universal-fmc-keyboard-plugin-all-platforms
        path: ./
    
    - name: Download individual platform artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Get version and changelog info
      id: version
      run: |
        # Extract version from tag (remove 'v' prefix if present)
        VERSION=${GITHUB_REF#refs/tags/}
        VERSION=${VERSION#v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Try to get previous tag for changelog
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
        fi
        
        # Generate basic changelog from commits
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## What's Changed" > CHANGELOG.md
          git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD >> CHANGELOG.md
        else
          echo "## What's New" > CHANGELOG.md
          echo "- Universal multi-aircraft keyboard input support" >> CHANGELOG.md
          echo "- ZIBO 737: Full dual FMC support with intelligent +/- state management" >> CHANGELOG.md
          echo "- Default 737: Native dual FMS support (FMS/FMS2 systems)" >> CHANGELOG.md
          echo "- Default A330: Complete dual FMS integration" >> CHANGELOG.md
          echo "- Default SR22: GPS GCU keyboard input support" >> CHANGELOG.md
          echo "- Automatic aircraft detection and adaptation" >> CHANGELOG.md
          echo "- Smart key mapping per aircraft type" >> CHANGELOG.md
        fi
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Universal FMC Keyboard Input Plugin v${{ steps.version.outputs.version }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
        files: |
          UniversalFMCKeyboardInput.tar.gz
          artifacts/universal-fmc-keyboard-plugin-windows/win.xpl
          artifacts/universal-fmc-keyboard-plugin-mac/mac.xpl
          artifacts/universal-fmc-keyboard-plugin-linux/lin.xpl
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}